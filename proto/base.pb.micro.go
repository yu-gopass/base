// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/base.proto

package base

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Base service

func NewBaseEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Base service

type BaseService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Base_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Base_PingPongService, error)
}

type baseService struct {
	c    client.Client
	name string
}

func NewBaseService(name string, c client.Client) BaseService {
	return &baseService{
		c:    c,
		name: name,
	}
}

func (c *baseService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Base.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Base_StreamService, error) {
	req := c.c.NewRequest(c.name, "Base.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &baseServiceStream{stream}, nil
}

type Base_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type baseServiceStream struct {
	stream client.Stream
}

func (x *baseServiceStream) Close() error {
	return x.stream.Close()
}

func (x *baseServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *baseServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *baseServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *baseServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baseService) PingPong(ctx context.Context, opts ...client.CallOption) (Base_PingPongService, error) {
	req := c.c.NewRequest(c.name, "Base.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &baseServicePingPong{stream}, nil
}

type Base_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type baseServicePingPong struct {
	stream client.Stream
}

func (x *baseServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *baseServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *baseServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *baseServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *baseServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *baseServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Base service

type BaseHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, Base_StreamStream) error
	PingPong(context.Context, Base_PingPongStream) error
}

func RegisterBaseHandler(s server.Server, hdlr BaseHandler, opts ...server.HandlerOption) error {
	type base interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type Base struct {
		base
	}
	h := &baseHandler{hdlr}
	return s.Handle(s.NewHandler(&Base{h}, opts...))
}

type baseHandler struct {
	BaseHandler
}

func (h *baseHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.BaseHandler.Call(ctx, in, out)
}

func (h *baseHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.BaseHandler.Stream(ctx, m, &baseStreamStream{stream})
}

type Base_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type baseStreamStream struct {
	stream server.Stream
}

func (x *baseStreamStream) Close() error {
	return x.stream.Close()
}

func (x *baseStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *baseStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *baseStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *baseStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *baseHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.BaseHandler.PingPong(ctx, &basePingPongStream{stream})
}

type Base_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type basePingPongStream struct {
	stream server.Stream
}

func (x *basePingPongStream) Close() error {
	return x.stream.Close()
}

func (x *basePingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *basePingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *basePingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *basePingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *basePingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
